 server {
     listen 80;

     server_name nestmatics.tk www.nestmatics.tk;

     location / {
        rewrite ^ https://$host$request_uri? permanent;
     }

    #for certbot challenges (renewal process)
     location ~ /.well-known/acme-challenge {
         allow all;
         root /data/letsencrypt;
     }
 }

#https://nestmatics.tk
 server {
     listen 443 ssl http2;
     listen [::]:443 ssl http2;
     server_name nestmatics.tk;
#
     server_tokens off;

     ssl_certificate /etc/letsencrypt/live/nestmatics.tk/fullchain.pem;
     ssl_certificate_key /etc/letsencrypt/live/nestmatics.tk/privkey.pem;

     ssl_buffer_size 8k;
#
     ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

     ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
     ssl_prefer_server_ciphers on;

     ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

     ssl_ecdh_curve secp384r1;
     ssl_session_tickets off;

     # OCSP stapling
     ssl_stapling on;
     ssl_stapling_verify on;
     resolver 8.8.8.8;

     return 301 https://www.nestmatics.tk$request_uri;
 }

#https://www.nestmatics.tk
server {
    server_name www.nestmatics.tk;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/nestmatics.tk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nestmatics.tk/privkey.pem;

    ssl_buffer_size 8k;

    ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_prefer_server_ciphers on;

    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    ssl_ecdh_curve secp384r1;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8;

    include /etc/nginx/mime.types;

    location /api {
        include uwsgi_params;
        uwsgi_pass flask:8080;
    }

    location /mongoadmin {
        proxy_pass  http://mongoexpress:8081;
        proxy_set_header    Host    $host;
        proxy_set_header    X-Real_IP   $remote_addr;
    }

    location / {
    	
    	# if uri ends with js, add header
    	if ($uri ~ \.js){
	    add_header Content-Type application/x-javascript;
    	}
    	
    	# if uri ends with css, add header
    	if ($uri ~ \.css){
	     add_header Content-Type text/css;
    	}
    	
    	# if uri ends with js, add header
        root /usr/share/nginx/html;
        index  /index.html;
        try_files $uri $uri/ /index.html;
    }
}
